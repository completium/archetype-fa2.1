archetype fa2_1(owner : address) with metadata ""

/* OWNERSHIP TRANSFER ------------------------------------------------------- */

variable owner_candidate : option<address> = none

entry declare_ownership(candidate : address) {
  called by owner
  effect {
    owner_candidate := some(candidate);
  }
}

entry claim_ownership() {
  require {
    ownership_r1: (owner_candidate ? the = caller : false) otherwise "INVALID_CALLER"
  }
  effect {
    owner := caller;
    owner_candidate := none
  }
}

/*  PAUSABLE ----------------------------------------------------------------- */

variable paused : bool = false

function is_not_paused() : bool {
  do_fail_if(paused, "CONTRACT_PAUSED");
  return true
}

entry pause() {
  called by owner
  require {
    pausable_r1: is_not_paused()
  }
  effect {
    paused := true
  }
}

entry unpause() {
  called by owner
  require {
    pausable_r2: paused otherwise "CONTRACT_NOT_PAUSED"
  }
  effect {
    paused := false
  }
}

/* METADATA ---------------------------------------------------------------- */

entry set_metadata(k: string, d : option<bytes>) {
  called by owner
  require { md_r1 : is_not_paused() }
  effect {
    metadata.update(k, d)
  }
}

/* TOKEN METADATA ------------------------------------------------------------ */

asset token_metadata to big_map {
  ftoken_metadata : nat;
  token_id        : nat;
  token_info      : map<string, bytes>;
}

entry set_token_metadata (tid : nat, tdata: map<string, bytes>) {
  called by owner
  require { tmd_r1: is_not_paused() }
  effect {
    token_metadata.add_update(tid, { token_id = tid; token_info = tdata });
  }
}

/* ERRORS ----------------------------------------------------------------- */

constant CALLER_NOT_OWNER             : string = "CALLER_NOT_OWNER"
constant FA2_1_UNSAFE_APPROVAL_CHANGE : string = "FA2.1_UNSAFE_APPROVAL_CHANGE"
constant FA2_INSUFFICIENT_BALANCE     : string = "FA2_INSUFFICIENT_BALANCE"
constant FA2_NOT_OPERATOR             : string = "FA2_NOT_OPERATOR"

/* PARAMETERS ------------------------------------------------------------- */

record transfer_destination {
  to_dest           : address;
  token_id_dest     : nat;
  token_amount_dest : nat
} as ((%to_, (token_id, amount)))

record transfer_param {
  tp_from : address;
  tp_txs  : list<transfer_destination>;
} as ((%from_, %txs))

record transfer_event_item {
  tei_from_ : option<address>;
  tei_txs: list<transfer_destination>;
} as ((from_, txs))

record operator_update_item {
  oui_owner : address;
  oui_operator : address;
  oui_token_id : nat;
  oui_is_operator : bool;
} as ((owner, operator, token_id, is_operator))

record approve_param {
  ar_owner: address;
  ar_spender: address;
  ar_token_id: nat;
  ar_value : nat;
} as ((%owner, %spender, %token_id, %value))

record approve_event_item {
  aei_from_ : option<address>;
  aei_txs: list<transfer_destination>;
} as ((from_, txs))

/* STORAGE ---------------------------------------------------------------- */

asset ledger identified by lowner ltokenid to big_map {
  lowner     : address;
  ltokenid   : nat;
  lamount    : nat = 0;
}

asset operator identified by oaddr otoken oowner to big_map {
  oaddr       : address;
  otoken      : nat;
  oowner      : address;
}

asset approve_ identified by aowner aspender atoken_id to big_map {
  aowner: address;
  aspender: address;
  atoken_id: nat;
  avalue : nat;
}

/* EVENTS ------------------------------------------------------------------ */

event transfer_event {
  te_sender : address;
  te_transfer : list<transfer_event_item>
} as ((sender, %transfer))

event operator_update_event {
  oue_sender : address;
  oue_operator_update : list<operator_update_item>
} as ((sender, %transfer))

event approval_event {
  ae_sender : address;
  ae_approval_update : list<approve_param>
} as ((sender, approval_update))

/* ENTRYPOINTS ------------------------------------------------------------- */

record operator_param {
  opp_owner    : address;
  opp_operator : address;
  opp_token_id : nat
} as ((owner, (operator, token_id)))

/*enum update_op =
| add_operator<operator_param>
| remove_operator<operator_param>

entry update_operators (upl : list<update_op>) {
  require { r0 : is_not_paused() }
  effect {
    for up in upl do
      match up with
      | add_operator(param) ->
        do_require(param.opp_owner = caller , CALLER_NOT_OWNER);
        operator.put({
          oaddr  = param.opp_operator;
          otoken = param.opp_token_id;
          oowner = param.opp_owner
        })
      | remove_operator(param) ->
        do_require(param.opp_owner = caller , CALLER_NOT_OWNER);
        operator.remove((param.opp_operator, param.opp_token_id, param.opp_owner))
      end;
    done;
  }
}*/

function make_operator_update_item (iparam : operator_param, io : bool) : operator_update_item {
  return {
      oui_owner = iparam.opp_owner;
      oui_operator = iparam.opp_operator;
      oui_token_id = iparam.opp_token_id;
      oui_is_operator = io
  }
}

entry update_operators (upl : list<or<operator_param, operator_param>>) {
  require { fa2_r1 : is_not_paused() }
  effect {
    for up in upl do
      match up with
      | left(param) -> (* add *)
        do_require(param.opp_owner = caller , CALLER_NOT_OWNER);
        operator.put({param.opp_operator; param.opp_token_id; param.opp_owner})
      | right(param) -> (* remove *)
        do_require(param.opp_owner = caller , CALLER_NOT_OWNER);
        operator.remove((param.opp_operator, param.opp_token_id, param.opp_owner))
      end;
    done;
    emit<operator_update_event>({oue_sender = caller; oue_operator_update = map(upl, up ->
    match up with
     | left(param)  -> make_operator_update_item (param, true)
     | right(param) -> make_operator_update_item (param, false)
    end)})
  }
}

entry approve(input : list<approve_param>) {
  for i in input do
    const k = (i.ar_owner, i.ar_spender, i.ar_token_id);
    const v = approve_[k] ? the.avalue : 0;
    do_fail_if(v > 0, (FA2_1_UNSAFE_APPROVAL_CHANGE, v));
    approve_.put({aowner = i.ar_owner; aspender = i.ar_spender; atoken_id = i.ar_token_id; avalue = i.ar_value})
  done;
  emit<approval_event>({ae_sender = caller; ae_approval_update = input})
}

entry %transfer (txs : list<transfer_param>) {
  require { fa2_r4 : is_not_paused() }
  effect {
    for tx in txs do
      const %from = tx.tp_from;
      const tds   = tx.tp_txs;
      for td in tds do begin
        const tid = td.token_id_dest;
        const amount = ledger[(%from, tid)]?.lamount ? the : 0;
        if caller = %from or operator.contains((caller, td.token_id_dest, %from)) then
          () // do nothing
        else begin
          const k = (caller, %from, td.token_id_dest);
          const vapprove_a ?= approve_[k] : FA2_NOT_OPERATOR;
          do_require(vapprove_a.avalue >= amount, "");
          approve_.update(k, {avalue -= amount})
        end;
        const new_amount ?=
            int_to_nat(amount - td.token_amount_dest) : FA2_INSUFFICIENT_BALANCE;
        if new_amount = 0 then
          ledger.remove((%from, tid))
        else begin
          ledger.update((%from, tid), { lamount := new_amount });
        end;
        ledger.add_update((td.to_dest, tid), { lamount += td.token_amount_dest })
      end done
    done;
    emit<transfer_event>({te_sender = caller; te_transfer = map(txs, tx -> {tei_from_ = some(tx.tp_from); tei_txs = tx.tp_txs})})
  }
}

entry mint (tow : address, tid : nat, nbt : nat) {
  called by owner
  require { fa2_r5: is_not_paused() }
  effect {
    ledger.add_update((tow, tid), { lamount += nbt });
  }
}

entry burn(tid : nat, nbt : nat) {
  constant {
    amount ?is ledger[(caller, tid)]?.lamount otherwise FA2_INSUFFICIENT_BALANCE
  }
  require {
    fa2_r6: is_not_paused();
    fa2_r7: amount >= nbt otherwise FA2_INSUFFICIENT_BALANCE
  }
  effect {
    if (amount > nbt) then
      ledger.update((caller, tid), { lamount -= nbt })
    else ledger.remove((caller, tid))
  }
}

record export_ticket_item {
  eti_from     : address;
  eti_token_id : nat;
  eti_amount   : nat;
} as ((%from, token_id, amount))

entry export_ticket(destination : or<contract<ticket<nat * option<bytes>>>, contract<list<ticket<nat * option<bytes>>>>>, tickets_to_export : list<export_ticket_item>) {
  var l : list<ticket<nat * option<bytes>>> = [];
  for eti in tickets_to_export do
    const aaa : (nat * option<bytes>) = (eti.eti_token_id, none<bytes>); // TODO
    l.prepend(create_ticket(aaa, 1))
  done;
  // operations :=
  //   match destination with
  //     | left(c)  -> map(l, x -> make_operation(0tz, c, x))
  //     | right(c) -> [make_operation(0tz, c, l)]
  //   end
}

record import_ticket_param {
  itp_to: nat;
  itp_tickets: ticket<nat * option<bytes>>;
} as ((%to_, %tickets_to_import))

entry import_ticket(input : list<import_ticket_param>) {
  // TODO
}


/* VIEWS ----------------------------------------------------------------- */

record balance_of_request {
  bo_owner : address;
  btoken_id : nat;
} as ((owner, token_id))

record balance_of_response {
  request : balance_of_request;
  balance_ : nat;
} as ((request, balance))

view balance_of (requests : list<balance_of_request>) : list<balance_of_response> {
  return map(requests, br ->
    {
      request = br;
      balance_ = (ledger[(br.bo_owner, br.btoken_id)] ? the.lamount : 0)
    })
}

record total_supply_request {
  tt_req_token_id : nat;
} as (token_id)

record total_supply_response {
  tt_resp_token_id : nat;
  tt_resp_total_supply : nat;
} as ((token_id, total_supply))

view total_supply(requests : list<total_supply_request>) : list<total_supply_response> {
  return map(requests, tsr -> {tt_resp_token_id = tsr.tt_req_token_id; tt_resp_total_supply = 1}) // TODO
}
